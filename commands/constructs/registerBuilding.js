const { SlashCommandBuilder } = require('discord.js');
const {generateInputs, retrieveInputs} = require('../../functions/createInputs');
const { Timestamp } = require('firebase-admin/firestore');
const {getFaction, setFaction} = require("../../functions/database");
const { log } = require('../../functions/log');
const { splitCurrency, convertToObject } = require('../../functions/currency');
const { objectMap } = require('../../functions/functions');

const regBLog = log('registerBuidling');

const inputs = [
    {name: "faction", description: "Faction", type: "String", required: true},
    {name: "name", description: "Building Name", type: "String", required: true},
    {name: "cost", description: "Cost of the Building", type: "String", required: true},
    {name: "year", description: "Date of creation", type: "Integer", required: true},
    {name: "month", description: "Date of creation", type: "Integer", required: true},
    {name: "day", description: "Date of creation", type: "Integer", required: true},
    {name: "capacity", description: "Capacities generated by the building", type: "String", required: false},
    {name: "storage", description: "Storage generated of the building", type: "String", required: false},
]

const runRegisterBuilding = async (interaction) => {
    const {faction, name, cost, capacity, storage, year, month, day} = retrieveInputs(interaction.options, inputs);
    const server = interaction.guild.name;

    const settings = await getFaction(server, "settings");
    const factionData = await getFaction(server, faction.toLowerCase());
    if (factionData === undefined) {
        regBLog({arguments: {faction}, error: 'Faction not found'})
        await interaction.reply('Faction not found');
        return;
    }
    
    const lastDate = Date.UTC(year, month - 1, day);
    const newDate = new Date(lastDate);
    const newTimestamp = Timestamp.fromDate(newDate);

    const calcCosts = splitCurrency(cost);

    const NaNCosts = calcCosts.some((cost) => isNaN(cost[0]));
    const isValidType = calcCosts.every((cost) => settings.Resources.indexOf(cost[1]) >= 0)
    if (NaNCosts || !isValidType || calcCosts === undefined) {
        error = 'Error in cost';
        regBLog({arguments, error});
        await interaction.reply(error);
        return;
    }

    const calcCapacities = splitCurrency(capacity ?? "0", settings.Capacities[0]);

    const NaNCapacities = calcCapacities.some((cost) => isNaN(cost[0]));
    const isValidTypeCapacity = calcCapacities.every((cost) => settings.Capacities.indexOf(cost[1]) >= 0)
    if (NaNCapacities || !isValidTypeCapacity || calcCapacities === undefined) {
        error = 'Error in income';
        console.log(calcCapacities);
        regBLog({arguments, error});
        await interaction.reply(error);
        return;
    }

    const calcStorages = splitCurrency(storage ?? "0");

    const NaNStorages = calcStorages.some((cost) => isNaN(cost[0]));
    const isValidTypeStorage = calcStorages.every((cost) => settings.Resources.indexOf(cost[1]) >= 0)
    if (NaNStorages || !isValidTypeStorage || calcStorages === undefined) {
        error = 'Error in Storage';
        regBLog({arguments, error});
        await interaction.reply(error);
        return;
    }

    const newBuildings = [
        ...factionData.Buildings,
        {
            date: newTimestamp, name, 
            cost: convertToObject(settings.Resources, calcCosts), 
            capacity: convertToObject(settings.Capacities, calcCapacities),
            storage: convertToObject(settings.Storage, calcStorages),
        }
    ]

    setFaction(server, faction, {Buildings: newBuildings});
    await interaction.reply(`${faction} has added the ${name} to its buildings`);
}

const command = new SlashCommandBuilder().setName('registerbuidling').setDescription('Register a new buidling');
generateInputs(command, inputs);

const registerbuilding = {
    data: command,
    execute: runRegisterBuilding
}

module.exports = registerbuilding;